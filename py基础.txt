1.is 和 ==, =和==的区别.
    is比较的是两个对象的id值是否相等，也就是比较俩对象是否为同一个实例对象，是否指向同一个内存地址。（is比较id是否是同一个内存）
    ==比较的是两个对象的内容是否相等，默认会调用对象的__eq__()方法
    只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False。
    只要 a 和 b 的值相等，a == b 就会返回True，而只有 id(a) 和 id(b) 相等时，a is b 才返回 True

    一个等号代表的含义是赋值，将某一数值赋给某个变量，比如a=3，将3这个数值赋予给a。
    两个等号是判断是否相等，返回True或False，比如1==1。他们是相等的，那么就返回true。1==2，他们是不相等的，那么就返回false
    常用于条件判断语句中，比如, 例如：if (a==3):  print('你好')，else: print（'不好意思，认错人了'）.代表如果a等于3的话执行if语句后的语句。相当于数学中的等号

2.None和null的区别.
    None是一个对象，而NULL是一个类型。
    Python中没有NULL，只有None，None有自己的特殊类型NoneType。
    None不等于0、任何空字符串、False等。
    在Python中，None、False、0、""(空字符串)、、()(空元组)、{}(空字典)都相当于False。
    print(None == '') # False
    print(None == 0) # False
    print(type(None)) #<class 'NoneType'> 

3.*args和**args的用法及区别
    3.1 （*）会把接收到的参数形成一个元组,  *args 用来将参数打包成tuple元祖给函数体调用
        def foo(*args):
            print(args)
        foo("1",2,"p") 输出: ('1', 2, 'p')

        def function(x, y, *args):
                print(x, y, args) 
        function(1, 2, 3, 4, 5) 输出: 1,2 (3,4,5)

        arr = [1, 2, 3, 4, 5]  
        foo(arr) 输出:([1, 2, 3, 4, 5],)
        如果我们希望将这个数组arr形成元组，需要在传入参数的前面加上一个*
        foo(*arr)  输出: (1, 2, 3, 4, 5)

    3.2 (**）将接收到的参数存入一个字典, **kwargs 打包关键字参数成dict字典给函数体调用
        def function(**kwargs):
            print(kwargs)
        function(a=2) 输出: {'a': 2}

    3.3 （*）和（**）一起使用　
        def foo(*args, **kwargs):
            print("args:", args)
            print("kwargs:", kwargs)
        foo(1, 2, 3, a=1, b=2) 输出: args: (1, 2, 3)  kwargs: {'a': 1, 'b': 2}

        def foo(name, *args, middle=66, **kwargs):
            print("name:", name)
            print("args:", args)
            print("middle:", middle)
            print("kwargs:", kwargs)
        foo("hello", 1, 2, 3, a=1, b=2, c=3)
        输出:
            name: hello
            args: (1, 2, 3)
            middle: 66
            kwargs: {'a': 1, 'b': 2, 'c': 3}

    3.4 注意点：参数arg、*args、**kwargs三个参数的位置必须是一定的。必须是(arg,*args,**kwargs)这个顺序，否则程序会报错。
        def function(arg,*args,**kwargs):
            print(arg,args,kwargs)
        function(6,7,8,9,a=1, b=2, c=3) 输出: 6 (7, 8, 9) {'a': 1, 'b': 2, 'c': 3}

4.装饰器


5.字符串切片
    获取单个字符:
        Python 允许从字符串的两端使用索引：
            当以字符串的左端（字符串的开头）为起点时，索引是从 0 开始计数的；字符串的第一个字符的索引为 0，第二个字符的索引为 1，第三个字符串的索引为 2 ……
            当以字符串的右端（字符串的末尾）为起点时，索引是从 -1 开始计数的；字符串的倒数第一个字符的索引为 -1，倒数第二个字符的索引为 -2，倒数第三个字符的索引为 -3 ……

    获取多个字符（字符串截去/字符串切片）           
        字符串[开始索引：结束索引：步长], 切取字符串为开始索引到结束索引-1内的字符串, 步长不指定时步长为1 字符串[开始索引:结束索引] 含左不含右
        开始索引表示要截取的第一个字符所在的索引（截取时包含该字符）。如果不指定，默认为 0，也就是从字符串的开头截取；
        结束索引表示要截取的最后一个字符所在的索引（截取时不包含该字符）。如果不指定，默认为字符串的长度；
        步长指的是从 start 索引处的字符开始，每 step 个距离获取一个字符，直至 end 索引出的字符。step 默认值为 1，当省略该值时，最后一个冒号也可以省略

        字符串 "axbyczdj"，如何得到结果“abcd”
        a = "axbyczdj"
        print(a[::2])   每隔2个字符取出一个字符

6.字符串切割
    str.split(s, num)[n] 
    通过指定分隔符对字符串进行切片，并返回分割后的字符串列表。
    s：表示指定的分隔符，不写的话，默认是空格(’ ‘)。如果字符串中没有给定的分隔符时，则把整个字符串作为列表的一个元素返回。 
    num：表示分割次数。如果指定了参数num，就会将字符串分割成num+1个子字符串，并且每一个子字符串可以赋给新的变量。 
    [n]：表示选取第n个分片，n表示返回的list中元素下标，从0开始的。

    b="hello_world_yoyo", 如何得到一个队列 ["hello","world","yoyo"]
    b="hello_world_yoyo"
    print(b.split("_"))

7. 打印出100-999所有的"水仙花数"，所谓"水仙花数"是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个"水仙花数"，因为153=1的三次方＋5的三次方＋3的三次方。
    方法1:
        sxh = []
        for i in range(100, 1000):
            s = 0
            m = list(str(i))
            for j in m:
                s += int(j)**len(m)
            if i == s:
                print(i)
                sxh.append(i)
        print("100-999的水仙花数：%s" % sxh)

    方法2:
        for a in range(1,10):
            for b in range(0,10):
                for c in range(0,10):
                    num =a*100+b*10+c
                    abc=a**3+b**3+c**3
                    if num==abc:
                        print(num)
    
    方法3:
        for i in range(100,1000):
        ge =i%10
        shi=i//10%10
        bai = i//100
        if ge**3+shi**3+bai**3==i:
            print(i)

8.用python写个冒泡排序
    a = [1, 3, 10, 9, 21, 35, 4, 6]
    def bubble_sort(array):
        for i in range(1, len(array)):
            for j in range(0, len(array)-i):
                if array[j] > array[j+1]:
                    array[j], array[j+1] = array[j+1], array[j]
        return array
    c=bubble_sort(a)
    print(c)
